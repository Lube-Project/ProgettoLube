[{"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\index.js":"1","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\App.js":"3","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Mappa.js":"4","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Footer.js":"5","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Contact.js":"6","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Navbar.js":"7","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Home.js":"8","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\DettagliReport.js":"9","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\DettagliStore.js":"10","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Button.js":"11"},{"size":500,"mtime":1608981576000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1608981576000,"results":"14","hashOfConfig":"13"},{"size":1049,"mtime":1610656932436,"results":"15","hashOfConfig":"13"},{"size":3382,"mtime":1610663373709,"results":"16","hashOfConfig":"13"},{"size":249,"mtime":1609608244037,"results":"17","hashOfConfig":"13"},{"size":177,"mtime":1609078606000,"results":"18","hashOfConfig":"13"},{"size":2464,"mtime":1609933573636,"results":"19","hashOfConfig":"13"},{"size":18842,"mtime":1610823565702,"results":"20","hashOfConfig":"13"},{"size":3540,"mtime":1610663373651,"results":"21","hashOfConfig":"13"},{"size":23627,"mtime":1610821374198,"results":"22","hashOfConfig":"13"},{"size":474,"mtime":1609235117223,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"zwuqb4",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\index.js",[],["53","54"],"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\App.js",[],"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Mappa.js",["55","56","57","58","59","60","61","62","63"],"// import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport React from 'react';\r\nimport '../css/App.css';\r\n// import AutoComplete from \"./Autocomplete\";\r\n// import Map from \"./MapComponent\";\r\nimport { useState, useEffect } from 'react';\r\nimport ReactMapGL, { Marker } from 'react-map-gl';\r\nimport axios from 'axios';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport logoLube from '../logoLube.png';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Mappa() {\r\n\r\n  useEffect(() => {\r\n    //getResellersName();\r\n    getResellersPosition();\r\n  }, []);\r\n\r\n\r\n  function getResellersName() {\r\n    axios.get(`http://127.0.0.1:5000/resellers/retrieveResellersNames`)\r\n      .then(res => {\r\n        const data = res.data;\r\n        // console.log(data.lista);\r\n        setStoreName(data.lista)\r\n      })\r\n\r\n  }\r\n  function getResellersPosition() {\r\n    axios.get(`http://127.0.0.1:5000/resellers/retrieveResellersPositions`)\r\n      .then(res => {\r\n        const data = res.data.lista;\r\n        var lista = [];\r\n        data.map(city => {\r\n          lista.push(city.nome);\r\n        });\r\n        setStorePositions(data);\r\n        setStoreName(lista);\r\n      })\r\n\r\n  }\r\n\r\n  function selectStore(newValue) {\r\n\r\n    if (newValue != null) {\r\n      setValue(newValue);\r\n      let pino = storePositions.find(x => x.nome === newValue);\r\n      viewport.latitude = pino.latitudine;\r\n      viewport.longitude = pino.longitudine;\r\n      viewport.zoom = 11;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  const [storePositions, setStorePositions] = useState();\r\n  const [storeName, setStoreName] = useState([]);\r\n  const [value, setValue] = React.useState();\r\n  const [name, setName] = React.useState();\r\n  const [latitude, setLatitude] = React.useState();\r\n  const [longitude, setLongitude] = React.useState();\r\n  const [viewport, setViewport] = useState({\r\n    width: \"1000\",\r\n    height: \"500px\",\r\n\r\n    latitude: 43.041040634170734,\r\n    longitude: 12.65069401829706,\r\n    zoom: 6,\r\n\r\n\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>MAPPA</h1>\r\n      <div className=\"Container\">\r\n        <Autocomplete\r\n          placeholder='Seleziona Sito'\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            selectStore(newValue);\r\n          }}\r\n          id=\"controllable-states-demo\"\r\n          options={storeName}\r\n          style={{ width: '100%' }}\r\n          renderInput={(params) => <TextField {...params} label=\"Seleziona sito\" variant=\"outlined\" />}\r\n        />\r\n\r\n        <ReactMapGL\r\n\r\n          mapStyle='mapbox://styles/stagemtmv/ckjh2rchph5tm19mqudag4i6e'\r\n          {...viewport}\r\n          onViewportChange={nextViewport => setViewport(nextViewport)}\r\n          mapboxApiAccessToken=\"pk.eyJ1Ijoic3RhZ2VtdG12IiwiYSI6ImNramgxZ25jcjk0a3UycWxiYmU1OWZ1ZnIifQ.uy5k7k9bzMeox5fzR3Iz3A\"\r\n\r\n        >\r\n\r\n          {\r\n            storePositions && storePositions.map(store => (\r\n             \r\n              <Link key={store.nome} to={`/store/${store.nome}`}>\r\n                <Marker key={store.nome} latitude={store.latitudine} longitude={store.longitudine}><img style={{ width: 50, height: 50 }} src={logoLube}></img></Marker>\r\n              </Link>\r\n\r\n            ))\r\n          }\r\n        </ReactMapGL>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mappa;\r\n","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Footer.js",[],"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Contact.js",[],"C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Navbar.js",["64","65","66"],"import React, { useState } from 'react';\r\n//import '../css/App.css';\r\nimport '../css/Navbar.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport logoLube from '../logoLube.png';\r\nimport { StepButton } from '@material-ui/core';\r\nimport {Button} from './Button';\r\n\r\n\r\nfunction Navbar() {\r\n  const [click,setClick]= useState(false);\r\n  const [button,setButton]= useState(true);\r\n\r\n  const handleClick=()=> setClick(!click);\r\n  const closeMobileMenu=()=>setClick(false);\r\n\r\n  const showButton=() =>{\r\n    if(window.innerWidth<=960){\r\n      setButton(false);\r\n    }else{\r\n      setButton(true);\r\n    }\r\n    }\r\n  \r\n  window.addEventListener(\"resize\",showButton);\r\n\r\n  const Logo = () => {\r\n    return <div className={button ? 'NavbarLogo' : 'NavbarLogoHidden'} >\r\n      <img src={logoLube} style={{ height: '100%', width: '20%' }} />\r\n     \r\n    </div>\r\n  }\r\n  \r\n  const Title= ()=> {\r\n  return <div className={button ? 'NavbarTitle' : 'NavbarTitleHidden'}> <Link style={{ color: '#fff', textDecoration: 'none' }} to=\"/\" >\r\n  <h1 style={{ fontSize: 65, fontFamily: 'Dancing Script'}}>Dashboard</h1>\r\n  </Link>\r\n  </div>\r\n  }\r\n  \r\n  return (\r\n    <div className=\"Navbar\">\r\n    \r\n    \r\n      <Logo />\r\n      <Title/>\r\n      <div className=\"menu-icon\" onClick={handleClick}>\r\n        <i className={click ? 'fas fa-times' : 'fas fa-bars'}/>\r\n      </div>\r\n\r\n      <ul className={click ? 'nav-menu active' : 'nav-menu'}>\r\n        <Link style={{ color: '#fff', textDecoration: 'none' }} to=\"/\" onClick={closeMobileMenu}>\r\n          <li className=\"nav-item\">\r\n            Home</li>\r\n        </Link>\r\n        <Link style={{ color: '#fff', textDecoration: 'none' }} to=\"/mappa\" onClick={closeMobileMenu}>\r\n          <li className=\"nav-item\">\r\n            Mappa</li>\r\n        </Link>\r\n        <Link style={{ color: '#fff', textDecoration: 'none' }} to=\"/contact\" onClick={closeMobileMenu}>\r\n          <li className=\"nav-item\">\r\n            Contact</li>\r\n        </Link></ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n//  .nav-menu {\r\n//    display: flex;\r\n//    flex-direction: column;\r\n//    width: 100%;\r\n//    height: 100.6%;\r\n//    position: absolute;\r\n//    top: 63px;\r\n//    left: 0;\r\n//    opacity: 1;\r\n//    transition: all 0.8s ease;\r\n//    z-index: 1;\r\n//  }\r\n//  .nav-menu.active {\r\n//    background: indianred;\r\n//    left: 90px;\r\n//    height: auto;\r\n//    padding-bottom: 5%;\r\n//    opacity: 1;\r\n//    transition: all 0.3s ease;\r\n//    z-index: 1;\r\n// }","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Home.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport '../css/App.css';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DatePicker from 'react-date-picker';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  DataGrid,\r\n  ColDef,\r\n  ValueGetterParams,\r\n  CellParams,\r\n  GridApi\r\n} from \"@material-ui/data-grid\";\r\n\r\nimport Carousel from 'react-elastic-carousel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport axios from 'axios';\r\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Slider, RangeSlider, InputNumber, InputGroup, Row, Col } from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  root: {\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  /* codice eseguito all'avvio della pagina */\r\n  useEffect(() => {\r\n    // fetchData();\r\n    //fetchPino();\r\n    fetchLastReports();\r\n    fetchResellerNames();\r\n  }, []);\r\n\r\n  function mettiPallini(array){\r\n    array = array.map(oggetto => {\r\n      oggetto.valutazione = oggetto.valutazione >=2.75 && oggetto.valutazione <=3 ? '🔴' \r\n      : oggetto.valutazione >= 2 && oggetto.valutazione < 2.75 ? '🟡' \r\n      : oggetto.valutazione >= 1 && oggetto.valutazione < 2 ? '🟢' \r\n      : '' ;\r\n    })\r\n    return array;\r\n  }\r\n\r\n\r\n\r\n  /* chiamata VERA per richiedere i dati al server */\r\n  const fetchLastReports = async () => {\r\n    axios.get(`http://127.0.0.1:5000/reports/retrieveLastReports`)\r\n      .then(res => {\r\n        const reports = res.data.lista;\r\n        //console.log(reports);\r\n        const pino = [\r\n          {\r\n            field: \"\",\r\n            headerName: \"Bottone\",\r\n            sortable: false,\r\n            width: 200,\r\n            disableClickEventBubbling: true,\r\n            renderCell: (params: CellParams) => {\r\n              const onClick = () => {\r\n                const api: GridApi = params.api;\r\n                const fields = api\r\n                  .getAllColumns()\r\n                  .map((c) => c.field)\r\n                  .filter((c) => c !== \"__check__\" && !!c);\r\n                const thisRow = {};\r\n\r\n                fields.forEach((f) => {\r\n                  thisRow[f] = params.getValue(f);\r\n                });\r\n\r\n                let path = `/${thisRow.id}`;\r\n                return history.push(path);\r\n              };\r\n\r\n              return <Button onClick={onClick}>Dettagli</Button>;\r\n            }\r\n          },\r\n          { field: 'id', headerName: 'id', width: 400, hide: true },\r\n          { field: 'date', headerName: 'Data', width: 400 },\r\n          { field: 'name', headerName: 'Nome', width: 400 },\r\n          { field: 'valutazione', headerName: 'Valutazione', width: '100%' },\r\n        ];\r\n        setColumns(pino);\r\n        mettiPallini(reports);\r\n        setReports(reports);\r\n      })\r\n\r\n  }\r\n\r\n  const fetchResellerNames = async () => {\r\n    axios.get(`http://127.0.0.1:5000/resellers/retrieveResellersNames`)\r\n      .then(res => {\r\n        const data = res.data;\r\n        // console.log(data.lista);\r\n        setStoreName(data.lista)\r\n      })\r\n\r\n  }\r\n\r\n  function fetchReportAnnuali() {\r\n        \r\n    if (!value) {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveYearAverage?year=${year}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports)\r\n        });    \r\n    } else {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveYearAverageName?year=${year}&name=${value}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports);\r\n        });   \r\n    }\r\n    const pino = [\r\n      { field: 'id', headerName: 'Name', width: 400, },\r\n      { field: 'year', headerName: 'Anno', width: 400 },\r\n      { field: 'valutazione', headerName: 'Valutazione', width: 400 },\r\n    ];\r\n    setColumns(pino);\r\n    return null;\r\n  }\r\n  function fetchReportMensili() {\r\n    //non ha selezionato il nome dello store\r\n\r\n    const pino = [\r\n      { field: 'id', headerName: 'Name', width: 350, },\r\n      { field: 'year', headerName: 'Anno', width: 340 },\r\n      { field: 'month', headerName: 'Mese', width: 340 },\r\n      { field: 'valutazione', headerName: 'Valutazione', width: '100%' },\r\n    ];\r\n    if (!value) {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveMonthYearAverage?year=${year}&month=${month}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports)\r\n        });\r\n      setColumns(pino);\r\n      return null;\r\n    } else {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveMonthYearAverageName?year=${year}&month=${month}&name=${value}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports);\r\n        });\r\n      setColumns(pino);\r\n      return null;\r\n    }\r\n  }\r\n  function fetchReportDate() {\r\n\r\n\r\n    const pino = [\r\n      { field: 'id', headerName: 'Name', width: 350, },\r\n      { field: 'year', headerName: 'Anno', width: 200 },\r\n      { field: 'month', headerName: 'Mese', width: 200 },\r\n      { field: 'day', headerName: 'Giorno', width: 200 },\r\n      { field: 'valutazione', headerName: 'Valutazione', width: '100%' },\r\n    ];\r\n    if (!value) {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveDayMonthYear?year=${date.getFullYear()}&month=${date.getMonth() + 1}&day=${date.getDate()}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports)\r\n        });\r\n      setColumns(pino);\r\n      return null;\r\n    } else {\r\n      axios.get(`http://127.0.0.1:5000/reports/retrieveDayMonthYearName?year=${date.getFullYear()}&month=${date.getMonth() + 1}&day=${date.getDate()}&name=${value}&range1=${range[0]}&range2=${range[1]}`)\r\n        .then(res => {\r\n          const reports = res.data.lista;\r\n          mettiPallini(reports);\r\n          setReports(reports);\r\n        });\r\n      setColumns(pino);\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  /* Hooks */\r\n  const [storeName, setStoreName] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n  const [value, setValue] = React.useState();\r\n  const [reports, setReports] = useState([]);\r\n  const [choice, setChoice] = React.useState('');\r\n  const [date, setDate] = useState(new Date());\r\n  const [range, setRange] = useState([1, 3]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n  const [year, setYear] = useState(0);\r\n  const [month, setMonth] = useState(0);\r\n  const [viewmonth, setViewmonth] = useState();\r\n\r\n  /* Variabili */\r\n  const history = useHistory();\r\n\r\n  const handleChange = (event) => {\r\n    setChoice(event.target.value);\r\n  };\r\n\r\n\r\n  const handleClick = () => setClick(!click);\r\n  const closeMobileMenu = () => setClick(false);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  }\r\n\r\n  window.addEventListener(\"resize\", showButton);\r\n  \r\n\r\n  function FormLastReports() {\r\n    return (\r\n      <div className=\"RicercaAnnuale\">\r\n        <Button\r\n          // onClick={fetchReportAnnuali()}\r\n          onClick={() => { fetchLastReports() }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          endIcon={<SearchIcon />}\r\n        >\r\n          Cerca\r\n      </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function FormAnnuale() {\r\n    return (\r\n      <div className=\"RicercaAnnuale\">\r\n\r\n        <Autocomplete\r\n          placeholder='Seleziona Sito'\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          id=\"controllable-states-demo\"\r\n          options={storeName}\r\n          style={{ width: '20%' }}\r\n          renderInput={(params) => <TextField {...params} label=\"Seleziona sito\" variant=\"outlined\" />}\r\n        />\r\n\r\n        <Row>\r\n          <Col md={10}>\r\n            <RangeSlider\r\n\r\n              step={0.1}\r\n              max={3}\r\n              min={1}\r\n              progress\r\n              style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n              value={range}\r\n              onChange={value => {\r\n                if (value[0] <= value[1]) {\r\n                  setRange(value);\r\n                  // console.log(range)\r\n                }\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col md={8}>\r\n            <InputGroup\r\n              style={{ width: \"15vw\" }}\r\n            >\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[0]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (nextValue > end) {\r\n                    return;\r\n                  }\r\n                  setRange([nextValue, end]);\r\n                }}\r\n              />\r\n              <InputGroup.Addon>to</InputGroup.Addon>\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[1]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (start > nextValue) {\r\n                    return;\r\n                  }\r\n                  setRange([start, nextValue]);\r\n                }}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <YearPicker\r\n          defaultValue={'Seleziona anno'}\r\n          start={2020}\r\n          end={2050}\r\n          required={true}\r\n          value={year}\r\n          onChange={(year) => {\r\n            if (year != NaN) year = parseInt(year);\r\n            setYear(year);\r\n            console.log(year);\r\n          }}\r\n          id={'year'}\r\n          name={'year'}\r\n          classes={'classes'}\r\n          optionClasses={'option classes'}\r\n        />\r\n\r\n        <Button\r\n          // onClick={fetchReportAnnuali()}\r\n          onClick={() => { fetchReportAnnuali() }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          endIcon={<SearchIcon />}\r\n        >\r\n          Send\r\n      </Button>\r\n\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\n  function FormMensile() {\r\n    return (\r\n      <div className=\"RicercaMensile\">\r\n\r\n        <Autocomplete\r\n          placeholder='Seleziona Sito'\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          id=\"controllable-states-demo\"\r\n          options={storeName}\r\n          style={{ width: '20%' }}\r\n          renderInput={(params) => <TextField {...params} label=\"Seleziona sito\" variant=\"outlined\" />}\r\n        />\r\n\r\n        <Row>\r\n          <Col md={10}>\r\n            <RangeSlider\r\n\r\n              step={0.1}\r\n              max={3}\r\n              min={1}\r\n              progress\r\n              style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n              value={range}\r\n              onChange={value => {\r\n                if (value[0] <= value[1]) {\r\n                  setRange(value);\r\n                  // console.log(range)\r\n                }\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col md={8}>\r\n            <InputGroup\r\n              style={{ width: \"15vw\" }}\r\n            >\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[0]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (nextValue > end) {\r\n                    return;\r\n                  }\r\n                  setRange([nextValue, end]);\r\n                }}\r\n              />\r\n              <InputGroup.Addon>to</InputGroup.Addon>\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[1]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (start > nextValue) {\r\n                    return;\r\n                  }\r\n                  setRange([start, nextValue]);\r\n                }}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <YearPicker\r\n          defaultValue={'Seleziona anno'}\r\n          start={2020}\r\n          end={2050}\r\n          required={true}\r\n          value={year}\r\n          onChange={(year) => {\r\n            if (year != NaN) year = parseInt(year);\r\n            setYear(year);\r\n            console.log(year);\r\n          }}\r\n          id={'year'}\r\n          name={'year'}\r\n          classes={'classes'}\r\n          optionClasses={'option classes'}\r\n        />\r\n        <MonthPicker\r\n          defaultValue={'Seleziona mese'}\r\n          numeric                   // to get months as numbers\r\n          short                     // default is full name\r\n          caps                      // default is Titlecase\r\n          endYearGiven              // mandatory if end={} is given in YearPicker\r\n          year={year}    // mandatory\r\n          required={true}           // default is false\r\n          // disabled={true}           // default is false\r\n          value={viewmonth}  // mandatory\r\n          onChange={(month) => {    // mandatory\r\n            if (month != NaN) var supp = parseInt(month);\r\n            supp = supp + 1;\r\n            setMonth(supp);\r\n            setViewmonth(month);\r\n            console.log('mese: ', supp);\r\n          }}\r\n          id={'month'}\r\n          name={'month'}\r\n          classes={'classes'}\r\n          optionClasses={'option classes'}\r\n        />\r\n        <Button\r\n          onClick={() => { fetchReportMensili() }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          endIcon={<SearchIcon />}\r\n        >\r\n          Send\r\n      </Button>\r\n\r\n      </div>\r\n\r\n    )\r\n\r\n  }\r\n\r\n  function FormGiornaliero() {\r\n    return (\r\n      <div className=\"RicercaMensile\">\r\n\r\n        <Autocomplete\r\n          placeholder='Seleziona Sito'\r\n          value={value}\r\n          onChange={(event, newValue) => {\r\n            setValue(newValue);\r\n          }}\r\n          id=\"controllable-states-demo\"\r\n          options={storeName}\r\n          style={{ width: '20%' }}\r\n          renderInput={(params) => <TextField {...params} label=\"Seleziona sito\" variant=\"outlined\" />}\r\n        />\r\n\r\n        <Row>\r\n          <Col md={10}>\r\n            <RangeSlider\r\n\r\n              step={0.1}\r\n              max={3}\r\n              min={1}\r\n              progress\r\n              style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n              value={range}\r\n              onChange={value => {\r\n                if (value[0] <= value[1]) {\r\n                  setRange(value);\r\n                  // console.log(range)\r\n                }\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col md={8}>\r\n            <InputGroup\r\n              style={{ width: \"15vw\" }}\r\n            >\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[0]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (nextValue > end) {\r\n                    return;\r\n                  }\r\n                  setRange([nextValue, end]);\r\n                }}\r\n              />\r\n              <InputGroup.Addon>to</InputGroup.Addon>\r\n              <InputNumber\r\n                min={1}\r\n                max={3}\r\n                value={range[1]}\r\n                onChange={nextValue => {\r\n                  const [start, end] = range;\r\n                  if (start > nextValue) {\r\n                    return;\r\n                  }\r\n                  setRange([start, nextValue]);\r\n                }}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <DatePicker\r\n          onChange={(value) => {\r\n            setDate(value);\r\n          }}\r\n          value={date}\r\n        />\r\n        <Button\r\n          onClick={() => { fetchReportDate() }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          endIcon={<SearchIcon />}\r\n        >\r\n          Send\r\n      </Button>\r\n\r\n      </div>)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App Esempio\">\r\n\r\n      <Carousel itemsToShow={1}>\r\n\r\n        <div className=\"CaroselloHome\">\r\n          <h2>SITI WEB</h2>\r\n\r\n          <div className={button ? 'Ricerca' : 'RicercaHidden'} >\r\n            {/* <h4 style={{ letterSpacing: 5 }}>SITI WEB</h4> */}\r\n\r\n            {choice == 'Report annuali' ?\r\n              <FormAnnuale /> : choice == 'Report mensili' ?\r\n                <FormMensile /> : choice == 'Report giornalieri' ?\r\n                  <FormGiornaliero /> : choice == 'Last reports' ? <FormLastReports /> : null}\r\n\r\n            <FormControl className={classes.formControl}   >\r\n\r\n              <InputLabel id=\"demo-simple-select-disabled-label\">Ultimi Report</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={choice}\r\n                onChange={handleChange}\r\n                placeholder={choice}\r\n\r\n\r\n              >\r\n                <MenuItem value={'Report annuali'}>Report annuali</MenuItem>\r\n                <MenuItem value={'Report mensili'}>Report mensili</MenuItem>\r\n                <MenuItem value={'Report giornalieri'}>Report giornalieri</MenuItem>\r\n                <MenuItem value={'Last reports'}>Ultimi Report</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <br />\r\n          <div className=\"ContainerTabella\">\r\n            <div className=\"Tabella\">\r\n              <DataGrid rows={reports} columns={columns} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"CaroselloHome\">\r\n          <h2>SOCIAL MEDIA</h2>\r\n\r\n        </div>\r\n      </Carousel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\DettagliReport.js",["94","95"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport '../css/App.css';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction Dettagli(props) {\r\n\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    function MyVerticallyCenteredModal(props) {\r\n        return (\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n                animation={false}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        TITOLO\r\n              </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Sottotitolo</h4>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n                        dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\r\n                        consectetur ac, vestibulum at eros.\r\n              </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    // viene eseguito appena viene caricata la pagina\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const [report, setReport] = useState({});\r\n\r\n    // chiamata fake per richiedere i dati \r\n    const fetchData = async () => {\r\n        const id = props.match.params.id;\r\n        axios.get(`http://127.0.0.1:5000/reports/findOne?id=${id}`)\r\n            .then(res => {\r\n                const report = res.data.lista;\r\n                console.log('Report', report);\r\n                setReport(report[0]);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"AppDettReport\">\r\n\r\n            <div className=\"Titolo\">\r\n                <h1>{report.name}</h1>\r\n                <h3>REPORT del {report.date}</h3>\r\n            </div>\r\n\r\n            <div className=\"ContainerGriglia\">\r\n\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>script</h3>\r\n                    <h4>si / no</h4>\r\n                </div>\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>parole chiave</h3>\r\n                    <h4>si / no</h4>\r\n                </div>\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>valutazione</h3>\r\n                    <h4>{report.valutazione}</h4>\r\n                </div>\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>correttezza logo</h3>\r\n                    <h4>si / no</h4>\r\n                </div>\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>competitors</h3>\r\n                    <h4>si / no</h4>\r\n                </div>\r\n                <div className=\"CardDR\" onClick={() => setModalShow(true)}>\r\n                    <h3>parole nelle foto</h3>\r\n                    <h4>si / no</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dettagli;\r\n","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\DettagliStore.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],"import React, { useState, useEffect } from 'react';\r\nimport '../css/App.css';\r\nimport axios from 'axios';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\nimport Carousel from 'react-elastic-carousel';\r\n\r\nimport DatePicker from 'react-date-picker';\r\nimport {\r\n    DataGrid,\r\n    ColDef,\r\n    ValueGetterParams,\r\n    CellParams,\r\n    GridApi\r\n} from \"@material-ui/data-grid\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { YearPicker, MonthPicker, DayPicker } from 'react-dropdown-date';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Slider, RangeSlider, InputNumber, InputGroup, Row, Col } from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n\r\n}));\r\n\r\nfunction DettagliStore(props) {\r\n\r\n    const data = props.match.params.name;\r\n\r\n\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchResellerDetails();\r\n    }, []);\r\n\r\n    function mettiPallini(array) {\r\n        array = array.map(oggetto => {\r\n            oggetto.valutazione = oggetto.valutazione >= 2.75 && oggetto.valutazione <= 3 ? '🔴'\r\n                : oggetto.valutazione >= 2 && oggetto.valutazione < 2.75 ? '🟡'\r\n                    : oggetto.valutazione >= 1 && oggetto.valutazione < 2 ? '🟢'\r\n                        : '';\r\n        })\r\n        return array;\r\n    }\r\n\r\n    /* carosello */\r\n    const handleSelect = (selectedIndex, e) => {\r\n        setIndex(selectedIndex);\r\n    };\r\n\r\n    /*\r\n    Hooks\r\n    */\r\n    const [storeDetails, setStoreDetails] = useState([]);\r\n    const [reports, setReports] = useState([]);\r\n    const [grid, setGrid] = useState(false);\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [storeName, setStoreName] = useState([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [drop, setDrop] = useState([]);\r\n    const [value, setValue] = React.useState();\r\n    const [siti, setSiti] = useState([]);\r\n    const [datatable, setDatatable] = useState({});\r\n\r\n\r\n    //const [reports, setReports] = useState([]);\r\n    const [choice, setChoice] = React.useState('');\r\n    const [date, setDate] = useState(new Date());\r\n    const [range, setRange] = useState([1, 3]);\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const [click, setClick] = useState(false);\r\n    const [button, setButton] = useState(true);\r\n\r\n    const history = useHistory();\r\n\r\n    const [name, setName] = useState(0);\r\n\r\n    const [year, setYear] = useState(0);\r\n    const [month, setMonth] = useState(0);\r\n    const [viewmonth, setViewmonth] = useState();\r\n\r\n    const showButton = () => {\r\n        if (window.innerWidth <= 960) {\r\n            setButton(false);\r\n        } else {\r\n            setButton(true);\r\n        }\r\n    }\r\n\r\n    window.addEventListener(\"resize\", showButton);\r\n\r\n\r\n    const fetchResellerDetails = async () => {\r\n        axios.get(`http://127.0.0.1:5000/resellers/retrieveResellerDetails?name=${data}`)\r\n            .then(res => {\r\n                const response = res.data;\r\n\r\n                //comune = report.COMUNE[\"70\"];\r\n                setStoreDetails(response);\r\n\r\n\r\n            })\r\n\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setChoice(event.target.value);\r\n    };\r\n\r\n    function getReportAnnuali() {\r\n        const pino = [\r\n            { field: 'id', headerName: 'Name', width: 400, },\r\n            { field: 'year', headerName: 'Anno', width: 400 },\r\n            { field: 'valutazione', headerName: 'Valutazione', width: 400 },\r\n        ];\r\n        //waiting for backy\r\n        axios.get(`http://127.0.0.1:5000/reports/retrieveYearAverageName?year=${year}&name=${data}&range1=${range[0]}&range2=${range[1]}`)\r\n            .then(res => {\r\n                const response = res.data.lista;\r\n                mettiPallini(response);\r\n                setReports(response);\r\n            });\r\n        setColumns(pino);\r\n        //setGrid(true);\r\n        return null;\r\n\r\n    }\r\n\r\n    function getReportMensile() {\r\n        //non ha selezionato il nome dello store\r\n        console.log(month);\r\n        const pino = [\r\n            { field: 'id', headerName: 'Name', width: 350, },\r\n            { field: 'year', headerName: 'Anno', width: 340 },\r\n            { field: 'month', headerName: 'Mese', width: 340 },\r\n            { field: 'valutazione', headerName: 'Valutazione', width: '100%' },\r\n        ];\r\n        axios.get(`http://127.0.0.1:5000/reports/retrieveMonthYearAverageName?year=${year}&month=${month}&name=${data}&range1=${range[0]}&range2=${range[1]}`)\r\n            .then(res => {\r\n                const reports = res.data.lista;\r\n                mettiPallini(reports);\r\n                setReports(reports);\r\n            });\r\n        setColumns(pino);\r\n        return null;\r\n\r\n\r\n    }\r\n\r\n    function getReportDate() {\r\n        //  TODO sistemare id e nome\r\n        const pino = [\r\n            { field: 'id', headerName: 'Name', width: 350, },\r\n            { field: 'year', headerName: 'Anno', width: 200 },\r\n            { field: 'month', headerName: 'Mese', width: 200 },\r\n            { field: 'day', headerName: 'Giorno', width: 200 },\r\n            { field: 'valutazione', headerName: 'Valutazione', width: '100%' },\r\n        ];\r\n        axios.get(`http://127.0.0.1:5000/reports/retrieveDayMonthYearName?year=${date.getFullYear()}&month=${date.getMonth() + 1}&day=${date.getDate()}&name=${data}&range1=${range[0]}&range2=${range[1]}`)\r\n            .then(res => {\r\n                const reports = res.data.lista;\r\n                mettiPallini(reports);\r\n                setReports(reports);\r\n            });\r\n        setColumns(pino);\r\n        return null;\r\n\r\n\r\n    }\r\n    function FormAnnuale() {\r\n        return (\r\n            <div className=\"RicercaAnnuale\">\r\n\r\n                {/* <div className=\"InputGroup\"> */}\r\n\r\n                <Row>\r\n                    <Col md={10}>\r\n                        <RangeSlider\r\n\r\n                            step={0.1}\r\n                            max={3}\r\n                            min={1}\r\n                            progress\r\n                            style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n                            value={range}\r\n                            onChange={value => {\r\n                                if (value[0] <= value[1]) {\r\n                                    setRange(value);\r\n                                    // console.log(range)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <InputGroup\r\n                            style={{ width: \"15vw\" }}\r\n                        >\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[0]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (nextValue > end) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([nextValue, end]);\r\n                                }}\r\n                            />\r\n                            <InputGroup.Addon>to</InputGroup.Addon>\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[1]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (start > nextValue) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([start, nextValue]);\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                {/* </div> */}\r\n                <YearPicker\r\n                    defaultValue={'Seleziona anno'}\r\n                    start={2020}\r\n                    end={2050}\r\n                    required={true}\r\n                    value={year}\r\n                    onChange={(year) => {\r\n                        if (year != NaN) year = parseInt(year);\r\n                        setYear(year);\r\n                        console.log(year);\r\n                    }}\r\n                    id={'year'}\r\n                    name={'year'}\r\n                    classes={'classes'}\r\n                    optionClasses={'option classes'}\r\n                />\r\n\r\n                <Button\r\n                    // onClick={fetchReportAnnuali()}\r\n                    onClick={() => { getReportAnnuali() }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    endIcon={<SearchIcon />}\r\n                >\r\n                    Send\r\n          </Button>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    function FormMensile() {\r\n        return (\r\n            <div className=\"RicercaAnnuale\">\r\n\r\n                <Row>\r\n                    <Col md={10}>\r\n                        <RangeSlider\r\n\r\n                            step={0.1}\r\n                            max={3}\r\n                            min={1}\r\n                            progress\r\n                            style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n                            value={range}\r\n                            onChange={value => {\r\n                                if (value[0] <= value[1]) {\r\n                                    setRange(value);\r\n                                    // console.log(range)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <InputGroup\r\n                            style={{ width: \"15vw\" }}\r\n                        >\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[0]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (nextValue > end) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([nextValue, end]);\r\n                                }}\r\n                            />\r\n                            <InputGroup.Addon>to</InputGroup.Addon>\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[1]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (start > nextValue) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([start, nextValue]);\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                <YearPicker\r\n                    defaultValue={'Seleziona anno'}\r\n                    start={2020}\r\n                    end={2050}\r\n                    required={true}\r\n                    value={year}\r\n                    onChange={(year) => {\r\n                        if (year != NaN) year = parseInt(year);\r\n                        setYear(year);\r\n                        console.log(year);\r\n                    }}\r\n                    id={'year'}\r\n                    name={'year'}\r\n                    classes={'classes'}\r\n                    optionClasses={'option classes'}\r\n                />\r\n                <MonthPicker\r\n                    defaultValue={'Seleziona mese'}\r\n                    numeric                   // to get months as numbers\r\n                    short                     // default is full name\r\n                    caps                      // default is Titlecase\r\n                    endYearGiven              // mandatory if end={} is given in YearPicker\r\n                    year={year}    // mandatory\r\n                    required={true}           // default is false\r\n                    // disabled={true}           // default is false\r\n                    value={viewmonth}  // mandatory\r\n                    onChange={(month) => {    // mandatory\r\n                        if (month != NaN) var supp = parseInt(month);\r\n                        supp = supp + 1;\r\n                        setMonth(supp);\r\n                        setViewmonth(month);\r\n                        console.log('mese: ', supp);\r\n                    }}\r\n                    id={'month'}\r\n                    name={'month'}\r\n                    classes={'classes'}\r\n                    optionClasses={'option classes'}\r\n                />\r\n                <Button\r\n                    onClick={() => { getReportMensile() }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    endIcon={<SearchIcon />}\r\n                >\r\n                    Send\r\n          </Button>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    function FormGiornaliero() {\r\n        return (\r\n            <div className=\"RicercaAnnuale\">\r\n\r\n                <Row>\r\n                    <Col md={10}>\r\n                        <RangeSlider\r\n\r\n                            step={0.1}\r\n                            max={3}\r\n                            min={1}\r\n                            progress\r\n                            style={{ marginTop: 16, marginBottom: 16, width: \"10vw\" }}\r\n                            value={range}\r\n                            onChange={value => {\r\n                                if (value[0] <= value[1]) {\r\n                                    setRange(value);\r\n                                    // console.log(range)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <InputGroup\r\n                            style={{ width: \"15vw\" }}\r\n                        >\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[0]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (nextValue > end) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([nextValue, end]);\r\n                                }}\r\n                            />\r\n                            <InputGroup.Addon>to</InputGroup.Addon>\r\n                            <InputNumber\r\n                                min={1}\r\n                                max={3}\r\n                                value={range[1]}\r\n                                onChange={nextValue => {\r\n                                    const [start, end] = range;\r\n                                    if (start > nextValue) {\r\n                                        return;\r\n                                    }\r\n                                    setRange([start, nextValue]);\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <DatePicker\r\n                    onChange={setDate}\r\n                    value={date}\r\n                />\r\n                <Button\r\n                    onClick={() => { getReportDate() }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    endIcon={<SearchIcon />}\r\n                >\r\n                    Send\r\n          </Button>\r\n\r\n            </div>)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App Esempio\">\r\n            <h2>DETTAGLI {data}</h2>\r\n\r\n            <Carousel itemsToShow={1}>\r\n\r\n                <div className=\"Carosello1\">\r\n                    <div className={button ? 'Ricerca' : 'RicercaHidden'} >\r\n                        {choice == 'Report annuali' ?\r\n                            <FormAnnuale /> : choice == 'Report mensili' ?\r\n                                <FormMensile /> : choice == 'Report giornalieri' ?\r\n                                    <FormGiornaliero /> : null}\r\n\r\n                        <FormControl className={classes.formControl}   >\r\n\r\n                            <InputLabel id=\"demo-simple-select-disabled-label\">Ultimi Report</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={choice}\r\n                                onChange={handleChange}\r\n                                placeholder={choice}\r\n\r\n\r\n                            >\r\n                                <MenuItem value={'Report annuali'}>Report annuali</MenuItem>\r\n                                <MenuItem value={'Report mensili'}>Report mensili</MenuItem>\r\n                                <MenuItem value={'Report giornalieri'}>Report giornalieri</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className=\"ContainerTabella\">\r\n                        <div className=\"Tabella\">\r\n                            <DataGrid rows={reports} columns={columns} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"cardsContainer\">\r\n\r\n                    <Card className={classes.root} variant=\"outlined\" style={{ position: \"relative\", width: \"20%\", height: \"80%\", marginTop: 5, marginBottom: 5, marginLeft: 5, marginRight: 5 }}>\r\n                        <CardContent >\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                {storeDetails.TIPOLOGIA}\r\n                                <br /><br />\r\n                            </Typography>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                ID NEGOZIO: {storeDetails.IDNEGOZIO}\r\n                            </Typography>\r\n                            {/* <Typography className={classes.pos} color=\"textSecondary\">\r\n                                adjective\r\n        </Typography> */}\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                <br /> RAGIONE SOCIALE:   {storeDetails[\"RAGIONE SOCIALE\"]}\r\n                                <br /> DESAGE: {storeDetails.DESAGE}\r\n                                {storeDetails[\"BRAND LUBE\"] ? <p>BRAND LUBE: {storeDetails[\"BRAND LUBE\"]}</p> : null}\r\n                                {storeDetails[\"BRAND CREO\"] ? <p>BRAND CREO: {storeDetails[\"BRAND CREO\"]}</p> : null}\r\n                            </Typography>\r\n                        </CardContent>\r\n\r\n                    </Card>\r\n                    <Card className={classes.root} variant=\"outlined\" style={{ position: \"relative\", width: \"20%\", height: \"80%\", marginTop: 5, marginBottom: 5, marginLeft: 5, marginRight: 5, }}>\r\n                        <CardContent>\r\n\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                {storeDetails.COMUNE}\r\n                                <br /><br />\r\n                            </Typography>\r\n                            <Typography className={classes.pos} color=\"textSecondary\">\r\n                                {storeDetails.INDIRIZZO}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                PROVINCIA: ({storeDetails.PROV})\r\n                            <br />\r\n                                {storeDetails.CAP}\r\n\r\n\r\n                            </Typography>\r\n                        </CardContent>\r\n\r\n                    </Card>\r\n                    <Card className={classes.root} variant=\"outlined\" style={{ position: \"relative\", width: \"20%\", height: \"80%\", marginTop: 5, marginBottom: 5, marginLeft: 5, marginRight: 5, }}>\r\n                        <CardContent>\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                SOCIAL\r\n        </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                <br />   {storeDetails.FB ? <SocialIcon url={storeDetails.FB} /> : null} <br />\r\n                                <br />   {storeDetails.ISTAGRAM ? <SocialIcon url={storeDetails.ISTAGRAM} /> : null} <br />\r\n                                <br /> {storeDetails.SITO ? <a href={storeDetails.SITO}><LanguageIcon style={{ fontSize: 53 }}></LanguageIcon></a> : null}\r\n\r\n                            </Typography>\r\n                        </CardContent>\r\n\r\n                    </Card>\r\n                    <Card className={classes.root} variant=\"outlined\" style={{ position: \"relative\", width: \"20%\", height: \"80%\", marginTop: 5, marginBottom: 5, marginLeft: 5, marginRight: 5, }}>\r\n                        <CardContent>\r\n\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                CONTATTI\r\n        </Typography>\r\n                            <Typography className={classes.pos} color=\"textSecondary\">\r\n                                <br />  <SocialIcon url=\"http://whatsapp.com\" /> <br />{storeDetails.Whatsapp}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                <br />   <SocialIcon url=\"mailto:\" /> <br />{storeDetails[\"Mail 1\"]}\r\n                                <br /><br />  <SocialIcon url=\"mailto:\" /> <br />{storeDetails[\"MAIL 2\"]}\r\n\r\n                            </Typography>\r\n                        </CardContent>\r\n\r\n                    </Card>\r\n                </div>\r\n            </Carousel>\r\n        </div>\r\n    );\r\n}\r\nexport default DettagliStore;","C:\\Users\\matti\\git\\ProgettoLube\\ProgettoLube\\frontend\\dashboard\\src\\components\\Button.js",["143","144","145","146"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst STYLES=['btn--primary','btn--outline'];\r\n\r\nconst SIZES=['btn--medium','btn--large'];\r\n\r\nexport const Button =({\r\n    children,\r\n    type,\r\n    onClick,\r\n    buttonStyle,\r\n    buttonSize\r\n}) =>{\r\n    const checkButtonStyle= STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\r\n\r\n    const checkButtonSize=SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\r\n\r\n    return(console.log(\"ciao\"))\r\n};",{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":24,"column":12,"nodeType":"153","messageId":"154","endLine":24,"endColumn":28},{"ruleId":"155","severity":1,"message":"156","line":38,"column":23,"nodeType":"157","messageId":"158","endLine":38,"endColumn":25},{"ruleId":"151","severity":1,"message":"159","line":63,"column":10,"nodeType":"153","messageId":"154","endLine":63,"endColumn":14},{"ruleId":"151","severity":1,"message":"160","line":63,"column":16,"nodeType":"153","messageId":"154","endLine":63,"endColumn":23},{"ruleId":"151","severity":1,"message":"161","line":64,"column":10,"nodeType":"153","messageId":"154","endLine":64,"endColumn":18},{"ruleId":"151","severity":1,"message":"162","line":64,"column":20,"nodeType":"153","messageId":"154","endLine":64,"endColumn":31},{"ruleId":"151","severity":1,"message":"163","line":65,"column":10,"nodeType":"153","messageId":"154","endLine":65,"endColumn":19},{"ruleId":"151","severity":1,"message":"164","line":65,"column":21,"nodeType":"153","messageId":"154","endLine":65,"endColumn":33},{"ruleId":"165","severity":1,"message":"166","line":106,"column":100,"nodeType":"167","endLine":106,"endColumn":154},{"ruleId":"151","severity":1,"message":"168","line":7,"column":10,"nodeType":"153","messageId":"154","endLine":7,"endColumn":20},{"ruleId":"151","severity":1,"message":"169","line":8,"column":9,"nodeType":"153","messageId":"154","endLine":8,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":30,"column":7,"nodeType":"167","endLine":30,"endColumn":70},{"ruleId":"151","severity":1,"message":"170","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"151","severity":1,"message":"171","line":10,"column":3,"nodeType":"153","messageId":"154","endLine":10,"endColumn":9},{"ruleId":"151","severity":1,"message":"172","line":11,"column":3,"nodeType":"153","messageId":"154","endLine":11,"endColumn":20},{"ruleId":"151","severity":1,"message":"173","line":20,"column":35,"nodeType":"153","messageId":"154","endLine":20,"endColumn":44},{"ruleId":"151","severity":1,"message":"174","line":26,"column":10,"nodeType":"153","messageId":"154","endLine":26,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":57,"column":6,"nodeType":"177","endLine":57,"endColumn":8,"suggestions":"178"},{"ruleId":"155","severity":1,"message":"156","line":60,"column":31,"nodeType":"157","messageId":"158","endLine":60,"endColumn":33},{"ruleId":"151","severity":1,"message":"179","line":214,"column":10,"nodeType":"153","messageId":"154","endLine":214,"endColumn":15},{"ruleId":"151","severity":1,"message":"180","line":214,"column":17,"nodeType":"153","messageId":"154","endLine":214,"endColumn":25},{"ruleId":"151","severity":1,"message":"181","line":235,"column":9,"nodeType":"153","messageId":"154","endLine":235,"endColumn":20},{"ruleId":"151","severity":1,"message":"182","line":236,"column":9,"nodeType":"153","messageId":"154","endLine":236,"endColumn":24},{"ruleId":"151","severity":1,"message":"183","line":309,"column":26,"nodeType":"153","messageId":"154","endLine":309,"endColumn":31},{"ruleId":"151","severity":1,"message":"184","line":322,"column":33,"nodeType":"153","messageId":"154","endLine":322,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":339,"column":17,"nodeType":"187","messageId":"188","endLine":339,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":339,"column":22,"nodeType":"187","messageId":"191","endLine":339,"endColumn":24},{"ruleId":"151","severity":1,"message":"183","line":408,"column":26,"nodeType":"153","messageId":"154","endLine":408,"endColumn":31},{"ruleId":"151","severity":1,"message":"184","line":421,"column":33,"nodeType":"153","messageId":"154","endLine":421,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":438,"column":17,"nodeType":"187","messageId":"188","endLine":438,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":438,"column":22,"nodeType":"187","messageId":"191","endLine":438,"endColumn":24},{"ruleId":"185","severity":1,"message":"186","line":458,"column":17,"nodeType":"187","messageId":"188","endLine":458,"endColumn":29},{"ruleId":"189","severity":1,"message":"190","line":458,"column":23,"nodeType":"187","messageId":"191","endLine":458,"endColumn":25},{"ruleId":"151","severity":1,"message":"183","line":528,"column":26,"nodeType":"153","messageId":"154","endLine":528,"endColumn":31},{"ruleId":"151","severity":1,"message":"184","line":541,"column":33,"nodeType":"153","messageId":"154","endLine":541,"endColumn":36},{"ruleId":"189","severity":1,"message":"192","line":582,"column":21,"nodeType":"187","messageId":"191","endLine":582,"endColumn":23},{"ruleId":"189","severity":1,"message":"192","line":583,"column":40,"nodeType":"187","messageId":"191","endLine":583,"endColumn":42},{"ruleId":"189","severity":1,"message":"192","line":584,"column":42,"nodeType":"187","messageId":"191","endLine":584,"endColumn":44},{"ruleId":"189","severity":1,"message":"192","line":585,"column":48,"nodeType":"187","messageId":"191","endLine":585,"endColumn":50},{"ruleId":"151","severity":1,"message":"170","line":2,"column":10,"nodeType":"153","messageId":"154","endLine":2,"endColumn":14},{"ruleId":"175","severity":1,"message":"193","line":45,"column":8,"nodeType":"177","endLine":45,"endColumn":10,"suggestions":"194"},{"ruleId":"151","severity":1,"message":"170","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":14},{"ruleId":"151","severity":1,"message":"171","line":17,"column":5,"nodeType":"153","messageId":"154","endLine":17,"endColumn":11},{"ruleId":"151","severity":1,"message":"172","line":18,"column":5,"nodeType":"153","messageId":"154","endLine":18,"endColumn":22},{"ruleId":"151","severity":1,"message":"195","line":19,"column":5,"nodeType":"153","messageId":"154","endLine":19,"endColumn":15},{"ruleId":"151","severity":1,"message":"196","line":20,"column":5,"nodeType":"153","messageId":"154","endLine":20,"endColumn":12},{"ruleId":"151","severity":1,"message":"173","line":25,"column":35,"nodeType":"153","messageId":"154","endLine":25,"endColumn":44},{"ruleId":"151","severity":1,"message":"174","line":31,"column":10,"nodeType":"153","messageId":"154","endLine":31,"endColumn":16},{"ruleId":"197","severity":1,"message":"198","line":54,"column":5,"nodeType":"199","messageId":"191","endLine":54,"endColumn":9},{"ruleId":"151","severity":1,"message":"200","line":69,"column":11,"nodeType":"153","messageId":"154","endLine":69,"endColumn":15},{"ruleId":"175","severity":1,"message":"201","line":75,"column":8,"nodeType":"177","endLine":75,"endColumn":10,"suggestions":"202"},{"ruleId":"155","severity":1,"message":"156","line":78,"column":35,"nodeType":"157","messageId":"158","endLine":78,"endColumn":37},{"ruleId":"151","severity":1,"message":"203","line":88,"column":11,"nodeType":"153","messageId":"154","endLine":88,"endColumn":23},{"ruleId":"151","severity":1,"message":"204","line":97,"column":12,"nodeType":"153","messageId":"154","endLine":97,"endColumn":16},{"ruleId":"151","severity":1,"message":"205","line":97,"column":18,"nodeType":"153","messageId":"154","endLine":97,"endColumn":25},{"ruleId":"151","severity":1,"message":"206","line":99,"column":12,"nodeType":"153","messageId":"154","endLine":99,"endColumn":17},{"ruleId":"151","severity":1,"message":"207","line":99,"column":19,"nodeType":"153","messageId":"154","endLine":99,"endColumn":27},{"ruleId":"151","severity":1,"message":"208","line":100,"column":12,"nodeType":"153","messageId":"154","endLine":100,"endColumn":21},{"ruleId":"151","severity":1,"message":"209","line":100,"column":23,"nodeType":"153","messageId":"154","endLine":100,"endColumn":35},{"ruleId":"151","severity":1,"message":"179","line":101,"column":12,"nodeType":"153","messageId":"154","endLine":101,"endColumn":17},{"ruleId":"151","severity":1,"message":"210","line":102,"column":12,"nodeType":"153","messageId":"154","endLine":102,"endColumn":16},{"ruleId":"151","severity":1,"message":"211","line":102,"column":18,"nodeType":"153","messageId":"154","endLine":102,"endColumn":25},{"ruleId":"151","severity":1,"message":"212","line":103,"column":12,"nodeType":"153","messageId":"154","endLine":103,"endColumn":17},{"ruleId":"151","severity":1,"message":"213","line":103,"column":19,"nodeType":"153","messageId":"154","endLine":103,"endColumn":27},{"ruleId":"151","severity":1,"message":"214","line":104,"column":12,"nodeType":"153","messageId":"154","endLine":104,"endColumn":16},{"ruleId":"151","severity":1,"message":"215","line":104,"column":18,"nodeType":"153","messageId":"154","endLine":104,"endColumn":25},{"ruleId":"151","severity":1,"message":"216","line":105,"column":12,"nodeType":"153","messageId":"154","endLine":105,"endColumn":21},{"ruleId":"151","severity":1,"message":"217","line":105,"column":23,"nodeType":"153","messageId":"154","endLine":105,"endColumn":35},{"ruleId":"151","severity":1,"message":"218","line":114,"column":12,"nodeType":"153","messageId":"154","endLine":114,"endColumn":17},{"ruleId":"151","severity":1,"message":"219","line":114,"column":19,"nodeType":"153","messageId":"154","endLine":114,"endColumn":27},{"ruleId":"151","severity":1,"message":"220","line":117,"column":11,"nodeType":"153","messageId":"154","endLine":117,"endColumn":18},{"ruleId":"151","severity":1,"message":"159","line":119,"column":12,"nodeType":"153","messageId":"154","endLine":119,"endColumn":16},{"ruleId":"151","severity":1,"message":"160","line":119,"column":18,"nodeType":"153","messageId":"154","endLine":119,"endColumn":25},{"ruleId":"151","severity":1,"message":"183","line":246,"column":44,"nodeType":"153","messageId":"154","endLine":246,"endColumn":49},{"ruleId":"151","severity":1,"message":"184","line":259,"column":51,"nodeType":"153","messageId":"154","endLine":259,"endColumn":54},{"ruleId":"185","severity":1,"message":"186","line":277,"column":29,"nodeType":"187","messageId":"188","endLine":277,"endColumn":40},{"ruleId":"189","severity":1,"message":"190","line":277,"column":34,"nodeType":"187","messageId":"191","endLine":277,"endColumn":36},{"ruleId":"151","severity":1,"message":"183","line":334,"column":44,"nodeType":"153","messageId":"154","endLine":334,"endColumn":49},{"ruleId":"151","severity":1,"message":"184","line":347,"column":51,"nodeType":"153","messageId":"154","endLine":347,"endColumn":54},{"ruleId":"185","severity":1,"message":"186","line":364,"column":29,"nodeType":"187","messageId":"188","endLine":364,"endColumn":40},{"ruleId":"189","severity":1,"message":"190","line":364,"column":34,"nodeType":"187","messageId":"191","endLine":364,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":384,"column":29,"nodeType":"187","messageId":"188","endLine":384,"endColumn":41},{"ruleId":"189","severity":1,"message":"190","line":384,"column":35,"nodeType":"187","messageId":"191","endLine":384,"endColumn":37},{"ruleId":"151","severity":1,"message":"183","line":442,"column":44,"nodeType":"153","messageId":"154","endLine":442,"endColumn":49},{"ruleId":"151","severity":1,"message":"184","line":455,"column":51,"nodeType":"153","messageId":"154","endLine":455,"endColumn":54},{"ruleId":"189","severity":1,"message":"192","line":492,"column":33,"nodeType":"187","messageId":"191","endLine":492,"endColumn":35},{"ruleId":"189","severity":1,"message":"192","line":493,"column":54,"nodeType":"187","messageId":"191","endLine":493,"endColumn":56},{"ruleId":"189","severity":1,"message":"192","line":494,"column":58,"nodeType":"187","messageId":"191","endLine":494,"endColumn":60},{"ruleId":"151","severity":1,"message":"221","line":1,"column":8,"nodeType":"153","messageId":"154","endLine":1,"endColumn":13},{"ruleId":"151","severity":1,"message":"170","line":2,"column":9,"nodeType":"153","messageId":"154","endLine":2,"endColumn":13},{"ruleId":"151","severity":1,"message":"222","line":15,"column":11,"nodeType":"153","messageId":"154","endLine":15,"endColumn":27},{"ruleId":"151","severity":1,"message":"223","line":17,"column":11,"nodeType":"153","messageId":"154","endLine":17,"endColumn":26},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"no-unused-vars","'getResellersName' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'latitude' is assigned a value but never used.","'setLatitude' is assigned a value but never used.","'longitude' is assigned a value but never used.","'setLongitude' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'StepButton' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","'ColDef' is defined but never used.","'ValueGetterParams' is defined but never used.","'DayPicker' is defined but never used.","'Slider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchLastReports'. Either include it or remove the dependency array.","ArrayExpression",["226"],"'index' is assigned a value but never used.","'setIndex' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'closeMobileMenu' is assigned a value but never used.","'start' is assigned a value but never used.","'end' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["227"],"'CellParams' is defined but never used.","'GridApi' is defined but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","'bull' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchResellerDetails'. Either include it or remove the dependency array.",["228"],"'handleSelect' is assigned a value but never used.","'grid' is assigned a value but never used.","'setGrid' is assigned a value but never used.","'posts' is assigned a value but never used.","'setPosts' is assigned a value but never used.","'storeName' is assigned a value but never used.","'setStoreName' is assigned a value but never used.","'drop' is assigned a value but never used.","'setDrop' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'siti' is assigned a value but never used.","'setSiti' is assigned a value but never used.","'datatable' is assigned a value but never used.","'setDatatable' is assigned a value but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'history' is assigned a value but never used.","'React' is defined but never used.","'checkButtonStyle' is assigned a value but never used.","'checkButtonSize' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [fetchLastReports]",{"range":"235","text":"236"},"Update the dependencies array to be: [fetchData]",{"range":"237","text":"238"},"Update the dependencies array to be: [fetchResellerDetails]",{"range":"239","text":"240"},[1555,1557],"[fetchLastReports]",[1515,1517],"[fetchData]",[2018,2020],"[fetchResellerDetails]"]