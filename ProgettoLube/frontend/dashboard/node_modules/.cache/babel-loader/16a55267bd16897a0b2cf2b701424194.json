{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mattia/Desktop/lube/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/App.css';\nimport Button from \"@material-ui/core/Button\";\nimport { DataGrid, ColDef, ValueGetterParams, CellParams, GridApi } from \"@material-ui/data-grid\";\n\nfunction Home() {\n  _s();\n\n  // viene eseguito appena viene caricata la pagina\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const [posts, setPosts] = useState([]); // chiamata fake per richiedere i dati \n\n  const fetchData = async () => {\n    const rawData = await fetch('https://jsonplaceholder.typicode.com/posts'); // adesso trasformo i dati ricevuti in json\n\n    const data = await rawData.json();\n    const posts = data.slice(0, 10); // con slice prendiamo solo i primi 10 elementi dell'array\n\n    console.log(posts);\n    setPosts(posts);\n  };\n\n  const columns = [{\n    field: \"\",\n    headerName: \"Button\",\n    sortable: false,\n    width: 100,\n    disableClickEventBubbling: true,\n    renderCell: params => {\n      const onClick = () => {\n        const api = params.api;\n        const fields = api.getAllColumns().map(c => c.field).filter(c => c !== \"__check__\" && !!c);\n        const thisRow = {};\n        fields.forEach(f => {\n          thisRow[f] = params.getValue(f);\n        });\n        return alert(JSON.stringify(thisRow, null, 4));\n      };\n\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClick,\n        children: \"Click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }, this);\n    }\n  }, {\n    field: 'userId',\n    headerName: 'Nome',\n    width: 200\n  }, {\n    field: 'id',\n    headerName: 'Data',\n    width: 200\n  }, {\n    field: 'title',\n    headerName: 'Correttezza',\n    width: 200\n  }, {\n    field: 'body',\n    headerName: 'Dettagli',\n    width: '100%'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HOME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Carosello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SITI | SOCIAL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ContainerTabella\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tabella\",\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: posts,\n          columns: columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"FmHHdP/DG4Zc2FxlDvu87iblgf4=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/mattia/Desktop/lube/src/components/Home.js"],"names":["React","useState","useEffect","Link","Button","DataGrid","ColDef","ValueGetterParams","CellParams","GridApi","Home","fetchData","posts","setPosts","rawData","fetch","data","json","slice","console","log","columns","field","headerName","sortable","width","disableClickEventBubbling","renderCell","params","onClick","api","fields","getAllColumns","map","c","filter","thisRow","forEach","f","getValue","alert","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/App.css';\nimport Button from \"@material-ui/core/Button\";\nimport {\n  DataGrid,\n  ColDef,\n  ValueGetterParams,\n  CellParams,\n  GridApi\n} from \"@material-ui/data-grid\";\n\nfunction Home() {\n\n  // viene eseguito appena viene caricata la pagina\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const [posts, setPosts] = useState([]);\n\n  // chiamata fake per richiedere i dati \n  const fetchData = async () => {\n    const rawData = await fetch('https://jsonplaceholder.typicode.com/posts');\n\n    // adesso trasformo i dati ricevuti in json\n    const data = await rawData.json();\n\n    const posts = data.slice(0, 10);    // con slice prendiamo solo i primi 10 elementi dell'array\n    console.log(posts);\n\n    setPosts(posts);\n  }\n\n  const columns = [\n    {\n      field: \"\",\n      headerName: \"Button\",\n      sortable: false,\n      width: 100,\n      disableClickEventBubbling: true,\n      renderCell: (params: CellParams) => {\n        const onClick = () => {\n          const api: GridApi = params.api;\n          const fields = api\n            .getAllColumns()\n            .map((c) => c.field)\n            .filter((c) => c !== \"__check__\" && !!c);\n          const thisRow = {};\n  \n          fields.forEach((f) => {\n            thisRow[f] = params.getValue(f);\n          });\n  \n          return alert(JSON.stringify(thisRow, null, 4));\n        };\n  \n        return <Button onClick={onClick}>Click</Button>;\n      }\n    },\n    { field: 'userId', headerName: 'Nome', width: 200 },\n    { field: 'id', headerName: 'Data', width: 200 },\n    { field: 'title', headerName: 'Correttezza', width: 200 },\n    { field: 'body', headerName: 'Dettagli', width: '100%' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1>HOME</h1>\n\n      <h2>Carosello</h2>\n      <h2>SITI | SOCIAL</h2>\n\n      <div className=\"ContainerTabella\">\n        <div className=\"Tabella\">\n          <DataGrid rows={posts} columns={columns} />\n        </div>\n      </div>\n\n      {/* posts.map(post => (\n        <Link key={post.id} to={`/${post.id}`}>\n          <h4 key={post.id} >{post.title}</h4>\n        </Link>\n      )) */}\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}